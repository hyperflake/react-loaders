{"version":3,"file":"LinearProgress.js","sources":["../../../lib/components/LinearProgress/LinearProgress.tsx"],"sourcesContent":["import { VariantProps, cva } from 'class-variance-authority';\nimport { ComponentPropsWithoutRef, FC, useMemo } from 'react';\n\nconst progressVariants = cva(['hf-linear-progressbar'], {\n    variants: {\n        variant: {\n            indeterminate: ['hf-linear-progressbar-indeterminate'],\n            determinate: ['hf-linear-progressbar-determinate'],\n        },\n        color: {\n            inherit: ['hf-progressbar-inherit'],\n            primary: ['hf-progressbar-primary'],\n            secondary: ['hf-progressbar-secondary'],\n            success: ['hf-progressbar-success'],\n            danger: ['hf-progressbar-danger'],\n            warning: ['hf-progressbar-warning'],\n        },\n    },\n    defaultVariants: {\n        variant: 'indeterminate',\n        color: 'primary',\n    },\n});\n\nexport interface LinearProgressProps\n    extends Omit<ComponentPropsWithoutRef<'span'>, 'color'>,\n        VariantProps<typeof progressVariants> {\n    value?: number;\n    showLabel?: boolean;\n    height?: number;\n}\n\nconst LinearProgress: FC<LinearProgressProps> = (props) => {\n    const { value, showLabel, height = 4, variant = 'indeterminate', color, className, ...rest } = props;\n\n    const offset = useMemo(() => {\n        if (variant === 'indeterminate') return 0;\n\n        let _value = Math.max(0, value);\n        _value = Math.min(_value, 100);\n\n        return _value;\n    }, [value, variant]);\n\n    return (\n        <span role=\"progressbar\" {...rest} className={progressVariants({ variant, color, className })}>\n            <svg width=\"100%\" height={height} style={{ borderRadius: height / 2 }}>\n                <rect\n                    fill=\"currentColor\"\n                    fillOpacity={0.2}\n                    width=\"100%\"\n                    height=\"100%\"\n                    rx={height / 2}\n                    ry={height / 2}\n                />\n\n                <rect\n                    className=\"hf-linear-progressbar-line\"\n                    fill=\"currentColor\"\n                    width={`${offset}%`}\n                    height=\"100%\"\n                    rx={height / 2}\n                    ry={height / 2}\n                />\n            </svg>\n\n            {showLabel && variant === 'determinate' && <span className=\"hf-linear-progressbar-label\">{offset}%</span>}\n        </span>\n    );\n};\n\nexport default LinearProgress;\n"],"names":[],"mappings":";;;AAGA,MAAM,mBAAmB,IAAI,CAAC,uBAAuB,GAAG;AAAA,EACpD,UAAU;AAAA,IACN,SAAS;AAAA,MACL,eAAe,CAAC,qCAAqC;AAAA,MACrD,aAAa,CAAC,mCAAmC;AAAA,IACrD;AAAA,IACA,OAAO;AAAA,MACH,SAAS,CAAC,wBAAwB;AAAA,MAClC,SAAS,CAAC,wBAAwB;AAAA,MAClC,WAAW,CAAC,0BAA0B;AAAA,MACtC,SAAS,CAAC,wBAAwB;AAAA,MAClC,QAAQ,CAAC,uBAAuB;AAAA,MAChC,SAAS,CAAC,wBAAwB;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,iBAAiB;AAAA,IACb,SAAS;AAAA,IACT,OAAO;AAAA,EACX;AACJ,CAAC;AAUK,MAAA,iBAA0C,CAAC,UAAU;AACjD,QAAA,EAAE,OAAO,WAAW,SAAS,GAAG,UAAU,iBAAiB,OAAO,WAAW,GAAG,KAAA,IAAS;AAEzF,QAAA,SAAS,QAAQ,MAAM;AACrB,QAAA,YAAY,gBAAwB,QAAA;AAExC,QAAI,SAAS,KAAK,IAAI,GAAG,KAAK;AACrB,aAAA,KAAK,IAAI,QAAQ,GAAG;AAEtB,WAAA;AAAA,EAAA,GACR,CAAC,OAAO,OAAO,CAAC;AAEnB,SACK,qBAAA,QAAA,EAAK,MAAK,eAAe,GAAG,MAAM,WAAW,iBAAiB,EAAE,SAAS,OAAO,UAAW,CAAA,GACxF,UAAA;AAAA,IAAC,qBAAA,OAAA,EAAI,OAAM,QAAO,QAAgB,OAAO,EAAE,cAAc,SAAS,EAAA,GAC9D,UAAA;AAAA,MAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACG,MAAK;AAAA,UACL,aAAa;AAAA,UACb,OAAM;AAAA,UACN,QAAO;AAAA,UACP,IAAI,SAAS;AAAA,UACb,IAAI,SAAS;AAAA,QAAA;AAAA,MACjB;AAAA,MAEA;AAAA,QAAC;AAAA,QAAA;AAAA,UACG,WAAU;AAAA,UACV,MAAK;AAAA,UACL,OAAO,GAAG,MAAM;AAAA,UAChB,QAAO;AAAA,UACP,IAAI,SAAS;AAAA,UACb,IAAI,SAAS;AAAA,QAAA;AAAA,MACjB;AAAA,IAAA,GACJ;AAAA,IAEC,aAAa,YAAY,iBAAkB,qBAAA,QAAA,EAAK,WAAU,+BAA+B,UAAA;AAAA,MAAA;AAAA,MAAO;AAAA,IAAA,GAAC;AAAA,EACtG,EAAA,CAAA;AAER;"}